{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Minimalist TODO Application - Consolidated Infrastructure",

  "Parameters": {
    "Environment": {
      "Type": "String",
      "Default": "dev",
      "AllowedValues": ["dev", "stage", "prod"],
      "Description": "Deployment environment"
    }
  },

  "Conditions": {
    "IsProduction": {
      "Fn::Not": [{ "Fn::Equals": [{ "Ref": "Environment" }, "dev"] }]
    }
  },

  "Globals": {
    "Function": {
      "Timeout": 10,
      "MemorySize": 256,
      "Runtime": "nodejs22.x",
      "Environment": {
        "Variables": {
          "TABLE_NAME": { "Ref": "MainTable" },
          "ENVIRONMENT": { "Ref": "Environment" }
        }
      }
    }
  },

  "Resources": {
    "HttpApi": {
      "Type": "AWS::Serverless::HttpApi",
      "Description": "Shared HTTP API Gateway for all domains",
      "Properties": {
        "Auth": {
          "Authorizers": {
            "LambdaAuth": {
              "FunctionArn": { "Fn::GetAtt": ["AuthorizerFunction", "Arn"] },
              "FunctionInvokeRole": {
                "Fn::GetAtt": ["AuthorizerInvokeRole", "Arn"]
              },
              "Identity": {
                "Headers": ["Authorization"]
              },
              "AuthorizerPayloadFormatVersion": "1.0",
              "EnableSimpleResponses": true,
              "ResultTtlInSeconds": 300
            }
          }
        },
        "CorsConfiguration": {
          "AllowCredentials": { "Fn::If": ["IsProduction", true, false] },
          "AllowHeaders": ["Content-Type", "Authorization"],
          "AllowMethods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
          "AllowOrigins": {
            "Fn::If": [
              "IsProduction",
              ["https://your-production-domain.com"],
              ["*"]
            ]
          }
        },
        "DefaultRouteSettings": {
          "ThrottlingBurstLimit": 100,
          "ThrottlingRateLimit": 50
        }
      }
    },

    "AuthorizerFunction": {
      "Type": "AWS::Serverless::Function",
      "Description": "JWT Lambda authorizer for API Gateway",
      "Properties": {
        "CodeUri": "domains/auth/",
        "Handler": "src/authorizer.handler",
        "Environment": {
          "Variables": {
            "JWT_SECRET_PARAMETER_NAME": "/minimalist-todo/jwt-secret"
          }
        },
        "Policies": [
          {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": ["ssm:GetParameter"],
                "Resource": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/minimalist-todo/jwt-secret"
                }
              }
            ]
          }
        ]
      }
    },

    "AuthorizerInvokeRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "InvokeAuthorizerFunction",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": { "Fn::GetAtt": ["AuthorizerFunction", "Arn"] }
                }
              ]
            }
          }
        ]
      }
    },

    "MainTable": {
      "Type": "AWS::DynamoDB::Table",
      "Description": "Single DynamoDB table for all application entities",
      "Properties": {
        "TableName": { "Fn::Sub": "${AWS::StackName}-main-table" },
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          { "AttributeName": "PK", "AttributeType": "S" },
          { "AttributeName": "SK", "AttributeType": "S" },
          { "AttributeName": "GSI1PK", "AttributeType": "S" },
          { "AttributeName": "GSI1SK", "AttributeType": "S" }
        ],
        "KeySchema": [
          { "AttributeName": "PK", "KeyType": "HASH" },
          { "AttributeName": "SK", "KeyType": "RANGE" }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "GSI1",
            "KeySchema": [
              { "AttributeName": "GSI1PK", "KeyType": "HASH" },
              { "AttributeName": "GSI1SK", "KeyType": "RANGE" }
            ],
            "Projection": { "ProjectionType": "ALL" }
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": { "SSEEnabled": true },
        "TimeToLiveSpecification": {
          "AttributeName": "TTL",
          "Enabled": true
        }
      }
    },

    "UsersFunction": {
      "Type": "AWS::Serverless::Function",
      "Description": "Handles all user management operations",
      "Properties": {
        "CodeUri": "dist/users/",
        "Handler": "index.handler",
        "Policies": [
          {
            "DynamoDBCrudPolicy": {
              "TableName": { "Ref": "MainTable" }
            }
          }
        ],
        "Events": {
          "UsersOptions": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/users",
              "Method": "OPTIONS",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "UserOptionsWithId": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/users/{userId}",
              "Method": "OPTIONS",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "CreateUser": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/users",
              "Method": "POST"
            }
          },
          "GetUser": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/users/{userId}",
              "Method": "GET"
            }
          },
          "UpdateUser": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/users/{userId}",
              "Method": "PUT"
            }
          },
          "DeleteUser": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/users/{userId}",
              "Method": "DELETE"
            }
          },
          "ListUsers": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/users",
              "Method": "GET"
            }
          }
        }
      }
    },
    "AuthFunction": {
      "Type": "AWS::Serverless::Function",
      "Description": "Handles authentication operations (signup, verify, login)",
      "Properties": {
        "CodeUri": "dist/auth/",
        "Handler": "index.handler",
        "Environment": {
          "Variables": {
            "SOURCE_EMAIL": "noreply@danike.com",
            "JWT_SECRET_PARAMETER_NAME": "/minimalist-todo/jwt-secret"
          }
        },
        "Events": {
          "Signup": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/auth/signup",
              "Method": "POST",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "Verify": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/auth/verify",
              "Method": "POST",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "Login": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/auth/login",
              "Method": "POST",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "AuthOptions": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/auth/{proxy+}",
              "Method": "OPTIONS",
              "ApiId": { "Ref": "HttpApi" }
            }
          }
        },
        "Policies": [
          {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:Query"
                ],
                "Resource": [
                  { "Fn::GetAtt": ["MainTable", "Arn"] },
                  {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MainTable}/index/GSI1"
                  }
                ]
              },
              {
                "Effect": "Allow",
                "Action": ["ses:SendEmail"],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": ["ssm:GetParameter"],
                "Resource": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/minimalist-todo/jwt-secret"
                }
              }
            ]
          }
        ]
      }
    },
    "TodosFunction": {
      "Type": "AWS::Serverless::Function",
      "Description": "Handles all TODO operations for authenticated users",
      "Properties": {
        "CodeUri": "dist/todos/",
        "Handler": "index.handler",
        "Policies": [
          {
            "DynamoDBCrudPolicy": {
              "TableName": { "Ref": "MainTable" }
            }
          }
        ],
        "Events": {
          "TodosOptions": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/todos",
              "Method": "OPTIONS",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "TodoOptionsWithId": {
            "Type": "HttpApi",
            "Properties": {
              "Path": "/todos/{todoId}",
              "Method": "OPTIONS",
              "ApiId": { "Ref": "HttpApi" }
            }
          },
          "CreateTodo": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/todos",
              "Method": "POST",
              "Auth": {
                "Authorizer": "LambdaAuth"
              }
            }
          },
          "GetTodo": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/todos/{todoId}",
              "Method": "GET",
              "Auth": {
                "Authorizer": "LambdaAuth"
              }
            }
          },
          "UpdateTodo": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/todos/{todoId}",
              "Method": "PUT",
              "Auth": {
                "Authorizer": "LambdaAuth"
              }
            }
          },
          "DeleteTodo": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/todos/{todoId}",
              "Method": "DELETE",
              "Auth": {
                "Authorizer": "LambdaAuth"
              }
            }
          },
          "ListTodos": {
            "Type": "HttpApi",
            "Properties": {
              "ApiId": { "Ref": "HttpApi" },
              "Path": "/todos",
              "Method": "GET",
              "Auth": {
                "Authorizer": "LambdaAuth"
              }
            }
          }
        }
      }
    },
    "FrontendStack": {
      "Type": "AWS::Serverless::Application",
      "Description": "Frontend infrastructure (S3, CloudFront)",
      "Properties": {
        "Location": "stacks/frontend/frontend.json",
        "Parameters": {
          "Environment": { "Ref": "Environment" }
        }
      }
    }
  },

  "Outputs": {
    "Environment": {
      "Description": "Deployment environment",
      "Value": { "Ref": "Environment" }
    },
    "HttpApiId": {
      "Description": "ID of the shared HTTP API",
      "Value": { "Ref": "HttpApi" }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Sub": "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      }
    },
    "MainTableName": {
      "Description": "Name of the main DynamoDB table",
      "Value": { "Ref": "MainTable" }
    },
    "MainTableArn": {
      "Description": "ARN of the main DynamoDB table",
      "Value": { "Fn::GetAtt": ["MainTable", "Arn"] }
    },
    "FrontendURL": {
      "Description": "URL of the static website",
      "Value": {
        "Fn::GetAtt": ["FrontendStack", "Outputs.FrontendURL"]
      }
    },
    "FrontendBucketName": {
      "Description": "S3 bucket for static website files",
      "Value": {
        "Fn::GetAtt": ["FrontendStack", "Outputs.FrontendBucketName"]
      }
    }
  }
}
