{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Authentication domain stack including OTP Lambda, RegisterUser Step Function, and AuthUsers table.",
  "Resources": {
    "AuthUsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          { "AttributeName": "pk", "AttributeType": "S" },
          { "AttributeName": "sk", "AttributeType": "S" }
        ],
        "KeySchema": [
          { "AttributeName": "pk", "KeyType": "HASH" },
          { "AttributeName": "sk", "KeyType": "RANGE" }
        ],
        "TimeToLiveSpecification": {
          "Enabled": true,
          "AttributeName": "ttl"
        }
      }
    },
    "GenerateOtpExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "GenerateOtpFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Runtime": "nodejs22.x",
        "Handler": "generate-otp.handler",
        "MemorySize": 128,
        "Timeout": 3,
        "Role": {
          "Fn::GetAtt": ["GenerateOtpExecutionRole", "Arn"]
        },
        "Code": "backend/cloudformation/domains/authentication/generate-otp.js"
      }
    },
    "RegisterStepFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "RegisterStepFunctionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["logs:*"],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["dynamodb:GetItem", "dynamodb:PutItem"],
                  "Resource": {
                    "Fn::GetAtt": ["AuthUsersTable", "Arn"]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": {
                    "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GenerateOtpFunction}*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RegisterUserStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": ["RegisterStepFunctionExecutionRole", "Arn"]
        },
        "Definition": {
          "StartAt": "CheckUserExists",
          "States": {
            "CheckUserExists": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
              "Parameters": {
                "TableName": { "Ref": "AuthUsersTable" },
                "Key": {
                  "pk": {
                    "S.$": "States.Format('user#{}', $.phone_number)"
                  },
                  "sk": {
                    "S": "PROFILE"
                  }
                }
              },
              "ResultPath": "$.userLookup",
              "Next": "UserExists?"
            },
            "UserExists?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.userLookup.Item",
                  "IsPresent": true,
                  "Next": "Abort_UserExists"
                }
              ],
              "Default": "PutUserRecord"
            },
            "Abort_UserExists": {
              "Type": "Fail",
              "Error": "UserAlreadyExists",
              "Cause": "A user with this phone number already exists."
            },
            "PutUserRecord": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:putItem",
              "Parameters": {
                "TableName": { "Ref": "AuthUsersTable" },
                "Item": {
                  "pk": {
                    "S.$": "States.Format('user#{}', $.phone_number)"
                  },
                  "sk": { "S": "PROFILE" },
                  "phone_number": { "S.$": "$.phone_number" },
                  "created": { "S.$": "$$.State.EnteredTime" }
                }
              },
              "Next": "GenerateOTP"
            },
            "GenerateOTP": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": {
                  "Ref": "GenerateOtpFunction"
                },
                "Payload": {
                  "phone_number.$": "$.phone_number"
                }
              },
              "ResultPath": "$.otpResult",
              "Next": "SendOTP"
            },
            "SendOTP": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:sns:publish",
              "Parameters": {
                "Message.$": "States.Format('Your OTP code is: {}', $.otpResult.Payload.code)",
                "PhoneNumber.$": "$.phone_number",
                "MessageAttributes": {
                  "AWS.SNS.SMS.SMSType": {
                    "DataType": "String",
                    "StringValue": "Transactional"
                  }
                }
              },
              "ResultPath": "$.smsResult",
              "Next": "Success"
            },
            "Success": {
              "Type": "Pass",
              "Result": "User registration completed",
              "ResultPath": "$.status",
              "End": true
            }
          }
        }
      }
    }
  },
  "Outputs": {
    "RegisterStateMachineArn": {
      "Description": "ARN of the RegisterUser Step Function",
      "Value": {
        "Ref": "RegisterUserStateMachine"
      }
    },
    "GenerateOtpFunctionArn": {
      "Description": "ARN of the GenerateOtp Lambda",
      "Value": {
        "Fn::GetAtt": ["GenerateOtpFunction", "Arn"]
      }
    }
  }
}
