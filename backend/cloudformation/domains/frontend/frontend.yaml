AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Minimalist TODO Application Frontend Infra

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod
    Description: Deployment environment

Conditions:
  UseCloudFront:
    Fn::Not:
      - Fn::Equals:
          - !Ref Environment
          - dev

Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy:
          Fn::If:
            - UseCloudFront
            - true
            - false
        RestrictPublicBuckets:
          Fn::If:
            - UseCloudFront
            - true
            - false
      # ---- SAM Best Practice: add server-side encryption by default ----
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Fn::If:
                - UseCloudFront
                - Service: cloudfront.amazonaws.com
                - "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${FrontendBucket}/*
            Condition:
              Fn::If:
                - UseCloudFront
                - StringEquals:
                    AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
                - !Ref AWS::NoValue
  CloudFrontLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldLogs
            Status: Enabled
            ExpirationInDays: 90
            Prefix: frontend/
      # You can set a unique name or let AWS generate one
      # Optionally add a lifecycle policy for cleanup

  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Condition: UseCloudFront
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: UseCloudFront
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !Sub ${FrontendBucket}.s3.${AWS::Region}.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        # ---- SAM Best Practice: enable access logs on CloudFront ----
        Logging:
          IncludeCookies: false
          Bucket: !GetAtt CloudFrontLoggingBucket.DomainName
          Prefix: frontend/

Outputs:
  FrontendURL:
    Description: Public frontend URL (CloudFront or S3 depending on environment)
    Value:
      Fn::If:
        - UseCloudFront
        - !Sub https://${CloudFrontDistribution.DomainName}
        - !Sub http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com

  FrontendBucketName:
    Description: Name of the S3 bucket
    Value: !Ref FrontendBucket
