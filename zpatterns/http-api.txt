This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where line numbers have been added, content has been compressed (code blocks are separated by ⋮---- delimiter), security check has been disabled.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Line numbers have been added to the beginning of each line
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
README.md/
  README.md
src/
  app.js/
    app.js
  package.json/
    package.json
template.yaml/
  template.yaml

================================================================
Files
================================================================

================
File: README.md/README.md
================
<!-- Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: MIT-0
//
Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so.
//
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. -->

# HTTP API with JWT

Simple HTTP API SAM template with a non-authenticated endpoint and an authenticated endpoint using Amazon Cognito as the identity provider.

## Resources

### HttpApi
Creates an HTTP API with a JWT authorizer

### LambdaFunction
Creates an open route

### SingleAuthLambdaFunction
Creates a route requiring authorization

### AdminLambdaFunction
Creates a route requiring authorization and a custom scope "Admins-{Audience}"

### SULambdaFunction
Creates a route requiring authorization and a custom scope "SU-{Audience}"

### BothLambdaFunction
Creates a route requiring authorization and a custom scope "Admins-{Audience}" or "SU-{Audience}"

### CatchAllLambdaFunction
Creates an unauthenticated $default route as a catchall

================
File: src/app.js/app.js
================
// Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
// //
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so.
⋮----
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
⋮----
exports.lambdaHandler = async (event) => JSON.stringify(event);

================
File: src/package.json/package.json
================
{
  "name": "sample_app",
  "version": "1.0.0",
  "description": "Sample app for HTTP API",
  "main": "app.js",
  "repository": "https://github.com/singledigit/sam-template-examples/http-api",
  "author": "ejohnson",
  "license": "MIT",
  "dependencies": {},
  "scripts": {},
  "devDependencies": {}
}

================
File: template.yaml/template.yaml
================
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API

Parameters:
  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool

Globals:
  Function:
    Timeout: 5
    Handler: app.lambdaHandler
    Runtime: nodejs16.x

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - GET
        AllowOrigins:
          - http://localhost:8080
  
  # Open route
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
            ApiId: !Ref HttpApi

  # Basic auth
  SimpleAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
            Path: /simple
            Method: get
            ApiId: !Ref HttpApi
  
  # Route for admins only: requires custom token (see cognito example)
  AdminLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        DosGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            Path: /admin
            Method: get
            ApiId: !Ref HttpApi
  
  # Route for SU only: requires custom token (see cognito example)
  SULambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        DosGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub SU-${Audience}
            Path: /su
            Method: get
            ApiId: !Ref HttpApi

  # Route for Admins and SU only: requires custom token (see cognito example)
  BothLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        DosGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
                - !Sub SU-${Audience}
            Path: /both
            Method: get
            ApiId: !Ref HttpApi

  # $default route used as catchall
  CatchAllLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi

Outputs:
  ApiEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"




================================================================
End of Codebase
================================================================
